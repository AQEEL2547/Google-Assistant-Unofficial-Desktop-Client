import type AssistantResponse from 'common/assistant-response/assistantResponseNode';
import type { AssistantAppConfig } from 'common/config/types';

/**
 * Inbound IPC calls received by renderer process from main process.
 * These IPC channels are meant to be associated with listeners
 * in renderer process so that it can respond to events emitted by
 * main process. A payload is sent as part of each of these channels
 * which could be consumed by the renderer process. In some cases, the
 * payload would be `undefined` signifying that it's merely intended
 * as a message or notification
 */
export interface RendererInboundIpcMetadata {
  'assistant:appConfig': {
    payload: {
      /**
       * The application config object
       */
      config: AssistantAppConfig,
    },
  },

  'assistant:showOauthTokenPrompt': {
    payload: {
      /**
       * The URL for getting auth code for a Google Account.
       * _(Typically to be used when the browser fails to open)_
       */
      authUrl: string,
    },
  },

  'assistant:audioResponse': {
    payload: {
      /**
       * Chunk of audio buffer received as a voice response
       */
      audioBuffer: Buffer,
    },
  },

  'assistant:transcription': {
    payload: {
      /**
       * Transcribed text for audio query recognized by assistant
       */
      transcription: string,

      /**
       * Specifies whether transcription is complete
       */
      done: boolean,
    },
  },

  'assistant:screenData': {
    payload: {
      /**
       * Screen data as a buffer. Possibly encoded HTML
       */
      data: string,

      /**
       * Format of screen data
       */
      format: 'HTML' | string,
    },
  },

  'assistant:endOfUtterance': {
    payload: undefined,
  },

  'assistant:conversationEnded': {
    payload: undefined,
  },

  'assistant:syncAssistantResponseHistory': {
    payload: {
      /**
       * List of all the responses generated by the assistant
       * (after processing by interceptors)
       */
      assistantResponseHistory: AssistantResponse[],
    },
  },

  'assistant:newAssistantResponseItem': {
    payload: {
      /**
       * Assistant response newly generated by the assistant.
       * This could be used to append the response in history list
       * in the renderer process
       */
      assistantResponse: AssistantResponse,
    },
  },

  'assistant:startMic': {
    payload: undefined,
  },

  'assistant:stopMic': {
    payload: undefined,
  },

  'assistant:stopAudioResponsePlayback': {
    payload: undefined,
  },
}

export default RendererInboundIpcMetadata;
